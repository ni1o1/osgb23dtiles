name: Build Multi-Platform Wheels

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS builds
          - os: macos-latest
            arch: x86_64
            python-version: '3.8'
          - os: macos-latest
            arch: arm64
            python-version: '3.8'
          # Linux builds
          - os: ubuntu-latest
            arch: x86_64
            python-version: '3.8'
          # Windows builds
          - os: windows-latest
            arch: x64
            python-version: '3.8'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.arch }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install wheel setuptools build twine

    - name: Build wheels (macOS x86_64)
      if: matrix.os == 'macos-latest' && matrix.arch == 'x86_64'
      run: |
        # 在macOS上强制使用x86_64架构
        arch -x86_64 python build_wheels.py
      
    - name: Build wheels (macOS ARM64)
      if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
      run: |
        # 在macOS上强制使用ARM64架构
        arch -arm64 python build_wheels.py
      
    - name: Build wheels (Linux/Windows)
      if: matrix.os != 'macos-latest'
      run: |
        python build_wheels.py

    - name: Verify wheel contents
      shell: bash
      run: |
        echo "=== 构建的文件 ==="
        ls -la dist/
        echo ""
        echo "=== Wheel包内容检查 ==="
        for wheel in dist/*.whl; do
          if [ -f "$wheel" ]; then
            echo "检查: $wheel"
            if command -v unzip >/dev/null 2>&1; then
              unzip -l "$wheel" | grep -E '\.(dylib|so|dll)$' || echo "未找到库文件"
            else
              echo "unzip命令不可用，跳过内容检查"
            fi
            echo "---"
          fi
        done

    - name: Test wheel installation
      run: |
        # 创建临时虚拟环境测试安装
        python -m venv test_env
        
        # 激活虚拟环境（跨平台兼容）
        if [ "$RUNNER_OS" = "Windows" ]; then
          source test_env/Scripts/activate
        else
          source test_env/bin/activate
        fi
        
        # 安装构建的wheel
        pip install dist/*.whl
        
        # 测试导入
        python -c "import osgb23dtiles; print('✅ 包安装和导入成功!')"
      shell: bash

    - name: Upload wheels as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: wheels-${{ matrix.os }}-${{ matrix.arch }}
        path: dist/*.whl
        retention-days: 30

    - name: Upload source distribution (only once)
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x86_64'
      uses: actions/upload-artifact@v3
      with:
        name: source-distribution
        path: dist/*.tar.gz
        retention-days: 30

  # 可选：发布到PyPI（仅在标签推送时）
  publish:
    name: Publish to PyPI
    needs: build_wheels
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment:
      name: pypi
      url: https://pypi.org/p/osgb23dtiles
    permissions:
      id-token: write  # 用于可信发布
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: dist-artifacts

    - name: Prepare distribution files
      run: |
        mkdir -p dist
        # 收集所有wheel文件
        find dist-artifacts -name "*.whl" -exec cp {} dist/ \;
        # 收集源分发文件
        find dist-artifacts -name "*.tar.gz" -exec cp {} dist/ \;
        
        echo "=== 准备发布的文件 ==="
        ls -la dist/

    - name: Verify distributions
      run: |
        pip install twine
        twine check dist/*

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        # 使用可信发布，无需API token
        # 如果需要使用API token，取消注释下面一行并在仓库设置中添加PYPI_API_TOKEN密钥
        # password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

  # 创建GitHub Release（仅在标签推送时）
  create_release:
    name: Create GitHub Release
    needs: build_wheels
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: dist-artifacts

    - name: Prepare release files
      run: |
        mkdir -p release-files
        # 收集所有构建文件
        find dist-artifacts -name "*.whl" -exec cp {} release-files/ \;
        find dist-artifacts -name "*.tar.gz" -exec cp {} release-files/ \;
        
        echo "=== Release文件 ==="
        ls -la release-files/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-files/*
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}